// <auto-generated />
using System;
using GolfLeagueManager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250624220018_AddPlayerSessionHandicap")]
    partial class AddPlayerSessionHandicap
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GolfLeagueManager.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("CourseRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("SlopeRating")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalPar")
                        .HasColumnType("integer");

                    b.Property<int>("TotalYardage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GolfLeagueManager.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<int>("HandicapIndex")
                        .HasColumnType("integer");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Par")
                        .HasColumnType("integer");

                    b.Property<int>("Yardage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHoles");
                });

            modelBuilder.Entity("GolfLeagueManager.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("GolfLeagueManager.HoleScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("HoleHandicap")
                        .HasColumnType("integer");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("MatchupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Par")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerAMatchPoints")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerAScore")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerBMatchPoints")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerBScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchupId", "HoleNumber")
                        .IsUnique();

                    b.ToTable("HoleScores");
                });

            modelBuilder.Entity("GolfLeagueManager.Matchup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("PlayerAAbsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("PlayerAAbsentWithNotice")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerAHolePoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlayerAId")
                        .HasColumnType("uuid");

                    b.Property<bool>("PlayerAMatchWin")
                        .HasColumnType("boolean");

                    b.Property<int?>("PlayerAPoints")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerAScore")
                        .HasColumnType("integer");

                    b.Property<bool>("PlayerBAbsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("PlayerBAbsentWithNotice")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerBHolePoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlayerBId")
                        .HasColumnType("uuid");

                    b.Property<bool>("PlayerBMatchWin")
                        .HasColumnType("boolean");

                    b.Property<int?>("PlayerBPoints")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerBScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("WeekId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerAId");

                    b.HasIndex("PlayerBId");

                    b.HasIndex("WeekId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("GolfLeagueManager.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("CurrentAverageScore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CurrentHandicap")
                        .HasColumnType("numeric");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("InitialAverageScore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InitialHandicap")
                        .HasColumnType("numeric");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GolfLeagueManager.PlayerFlightAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid");

                    b.Property<double>("HandicapAtAssignment")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsFlightLeader")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerFlightAssignments");
                });

            modelBuilder.Entity("GolfLeagueManager.PlayerSessionAverage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SessionInitialAverage")
                        .HasColumnType("numeric");

                    b.Property<int>("SessionStartWeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("PlayerId", "SeasonId", "SessionStartWeekNumber")
                        .IsUnique();

                    b.ToTable("PlayerSessionAverages");
                });

            modelBuilder.Entity("GolfLeagueManager.PlayerSessionHandicap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SessionInitialHandicap")
                        .HasColumnType("numeric");

                    b.Property<int>("SessionStartWeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("PlayerId", "SeasonId", "SessionStartWeekNumber")
                        .IsUnique();

                    b.ToTable("PlayerSessionHandicaps");
                });

            modelBuilder.Entity("GolfLeagueManager.ScoreEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("integer");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<Guid>("WeekId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("WeekId");

                    b.ToTable("ScoreEntries");
                });

            modelBuilder.Entity("GolfLeagueManager.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("GolfLeagueManager.Week", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("CountsForHandicap")
                        .HasColumnType("boolean");

                    b.Property<bool>("CountsForScoring")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NineHoles")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<bool>("SessionStart")
                        .HasColumnType("boolean");

                    b.Property<string>("SpecialCircumstanceNote")
                        .HasColumnType("text");

                    b.Property<int?>("SpecialPointsAwarded")
                        .HasColumnType("integer");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("GolfLeagueManager.CourseHole", b =>
                {
                    b.HasOne("GolfLeagueManager.Course", "Course")
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("GolfLeagueManager.Flight", b =>
                {
                    b.HasOne("GolfLeagueManager.Season", "Season")
                        .WithMany("Flights")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GolfLeagueManager.HoleScore", b =>
                {
                    b.HasOne("GolfLeagueManager.Matchup", "Matchup")
                        .WithMany()
                        .HasForeignKey("MatchupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matchup");
                });

            modelBuilder.Entity("GolfLeagueManager.Matchup", b =>
                {
                    b.HasOne("GolfLeagueManager.Player", "PlayerA")
                        .WithMany("MatchupsAsPlayerA")
                        .HasForeignKey("PlayerAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GolfLeagueManager.Player", "PlayerB")
                        .WithMany("MatchupsAsPlayerB")
                        .HasForeignKey("PlayerBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GolfLeagueManager.Week", "Week")
                        .WithMany("Matchups")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerA");

                    b.Navigation("PlayerB");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("GolfLeagueManager.PlayerFlightAssignment", b =>
                {
                    b.HasOne("GolfLeagueManager.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfLeagueManager.Player", "Player")
                        .WithMany("FlightAssignments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GolfLeagueManager.PlayerSessionAverage", b =>
                {
                    b.HasOne("GolfLeagueManager.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfLeagueManager.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GolfLeagueManager.PlayerSessionHandicap", b =>
                {
                    b.HasOne("GolfLeagueManager.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfLeagueManager.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GolfLeagueManager.ScoreEntry", b =>
                {
                    b.HasOne("GolfLeagueManager.Player", "Player")
                        .WithMany("ScoreEntries")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfLeagueManager.Week", "Week")
                        .WithMany("ScoreEntries")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("GolfLeagueManager.Week", b =>
                {
                    b.HasOne("GolfLeagueManager.Season", "Season")
                        .WithMany("Weeks")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GolfLeagueManager.Course", b =>
                {
                    b.Navigation("CourseHoles");
                });

            modelBuilder.Entity("GolfLeagueManager.Player", b =>
                {
                    b.Navigation("FlightAssignments");

                    b.Navigation("MatchupsAsPlayerA");

                    b.Navigation("MatchupsAsPlayerB");

                    b.Navigation("ScoreEntries");
                });

            modelBuilder.Entity("GolfLeagueManager.Season", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("GolfLeagueManager.Week", b =>
                {
                    b.Navigation("Matchups");

                    b.Navigation("ScoreEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
