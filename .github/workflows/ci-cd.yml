name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  POSTGRES_USER: golfuser
  POSTGRES_PASSWORD: golfpassword
  POSTGRES_DB: golfdb

jobs:
  test:
    name: Test Application
    runs-on: self-hosted
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Restore .NET dependencies
      working-directory: ./backend
      run: dotnet restore

    - name: Build .NET application
      working-directory: ./backend
      run: dotnet build --no-restore --configuration Release

    - name: Run .NET tests
      working-directory: ./backend
      run: dotnet test --no-build --configuration Release --verbosity normal
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5433;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci --legacy-peer-deps

    - name: Build frontend application
      working-directory: ./frontend
      run: npm run build

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test -- --watch=false --browsers=ChromeHeadless

  build-and-deploy:
    name: Build and Deploy
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Stop existing containers
      run: |
        if docker ps -q --filter "name=golfleague_" | grep -q .; then
          echo "Stopping existing containers..."
          docker compose down
        else
          echo "No existing containers to stop"
        fi

    - name: Remove old images (keep last 2)
      run: |
        # Clean up old backend images
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep "golfleaguemanager.*backend" | tail -n +3 | awk '{print $3}' | xargs -r docker rmi -f || true
        
        # Clean up old frontend images  
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep "golfleaguemanager.*frontend" | tail -n +3 | awk '{print $3}' | xargs -r docker rmi -f || true
        
        # Clean up dangling images
        docker image prune -f

    - name: Build and start services
      run: |
        echo "Building and starting services..."
        docker compose up -d --build
        
        echo "Waiting for services to be ready..."
        sleep 30

    - name: Wait for database to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60s bash -c 'until docker exec golfleague_postgres pg_isready -U ${{ env.POSTGRES_USER }}; do sleep 2; done'

    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        chmod +x ./migrate-all-tenants.sh
        ./migrate-all-tenants.sh

    - name: Verify deployment
      run: |
        chmod +x ./verify-deployment.sh
        ./verify-deployment.sh

    - name: Cleanup old containers and volumes
      run: |
        # Remove stopped containers
        docker container prune -f
        
        # Remove unused volumes (be careful with this in production)
        # docker volume prune -f

  notify:
    name: Notify Deployment Status
    runs-on: self-hosted
    needs: [test, build-and-deploy]
    if: always()
    
    steps:
    - name: Deployment Success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Frontend: http://localhost:4500"
        echo "Backend: http://localhost:5505"
        
    - name: Deployment Failed
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs above for details."
        exit 1
