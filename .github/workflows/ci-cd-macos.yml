name: CI/CD Pipeline (macOS)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  POSTGRES_USER: golfuser
  POSTGRES_PASSWORD: golfpassword
  POSTGRES_DB: golfdb

jobs:
  test:
    name: Test Application
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Start test database
      run: |
        echo "üóÑÔ∏è Starting test database..."
        # Stop any existing test database
        docker stop test-postgres || true
        docker rm test-postgres || true
        
        # Start new test database
        docker run -d \
          --name test-postgres \
          -p 5433:5432 \
          -e POSTGRES_USER=${{ env.POSTGRES_USER }} \
          -e POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
          -e POSTGRES_DB=${{ env.POSTGRES_DB }} \
          postgres:16
        
        # Wait for database to be ready
        echo "‚è≥ Waiting for database to be ready..."
        timeout 60 bash -c 'until docker exec test-postgres pg_isready -U ${{ env.POSTGRES_USER }}; do sleep 2; done'

    - name: Restore .NET dependencies
      working-directory: ./backend
      run: dotnet restore

    - name: Build .NET application
      working-directory: ./backend
      run: dotnet build --no-restore --configuration Release

    - name: Run .NET tests
      working-directory: ./backend
      run: dotnet test --no-build --configuration Release --verbosity normal
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5433;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci --legacy-peer-deps

    - name: Build frontend application
      working-directory: ./frontend
      run: npm run build

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test -- --watch=false --browsers=ChromeHeadless

    - name: Cleanup test database
      if: always()
      run: |
        echo "üßπ Cleaning up test database..."
        docker stop test-postgres || true
        docker rm test-postgres || true

  build-and-deploy:
    name: Build and Deploy
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create backup before deployment
      run: |
        echo "üì¶ Creating backup before deployment..."
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        
        # Backup current images if they exist
        if docker images | grep -q golfleaguemanager.*backend; then
          BACKEND_ID=$(docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep "golfleaguemanager.*backend" | head -1 | awk '{print $3}')
          docker tag $BACKEND_ID golfleaguemanager_backend_backup:$TIMESTAMP
          echo "‚úÖ Backend backup created: golfleaguemanager_backend_backup:$TIMESTAMP"
        fi
        
        if docker images | grep -q golfleaguemanager.*frontend; then
          FRONTEND_ID=$(docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep "golfleaguemanager.*frontend" | head -1 | awk '{print $3}')
          docker tag $FRONTEND_ID golfleaguemanager_frontend_backup:$TIMESTAMP
          echo "‚úÖ Frontend backup created: golfleaguemanager_frontend_backup:$TIMESTAMP"
        fi

    - name: Stop existing containers
      run: |
        echo "üõë Stopping existing containers..."
        if docker compose ps -q | grep -q .; then
          docker compose down
          echo "‚úÖ Containers stopped"
        else
          echo "‚ÑπÔ∏è No running containers to stop"
        fi

    - name: Build and start services
      run: |
        echo "üî® Building and starting services..."
        docker compose up -d --build
        
        echo "‚è≥ Waiting for services to start..."
        sleep 30

    - name: Wait for database to be ready
      run: |
        echo "‚è≥ Waiting for PostgreSQL to be ready..."
        timeout 120s bash -c 'until docker exec golfleague_postgres pg_isready -U ${{ env.POSTGRES_USER }}; do sleep 2; done'

    - name: Run database migrations
      run: |
        echo "üóÑÔ∏è Running database migrations..."
        chmod +x ./migrate-all-tenants.sh
        ./migrate-all-tenants.sh

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        chmod +x ./verify-deployment.sh
        ./verify-deployment.sh

    - name: Cleanup old images
      run: |
        echo "üßπ Cleaning up old images..."
        # Keep last 3 versions of each image
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep "golfleaguemanager.*backend" | tail -n +4 | awk '{print $3}' | xargs -r docker rmi -f || true
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep "golfleaguemanager.*frontend" | tail -n +4 | awk '{print $3}' | xargs -r docker rmi -f || true
        
        # Clean up dangling images
        docker image prune -f

  notify:
    name: Notify Deployment Status
    runs-on: self-hosted
    needs: [test, build-and-deploy]
    if: always()
    
    steps:
    - name: Deployment Success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Frontend: http://localhost:4500"
        echo "Backend: http://localhost:5505"
        echo "Health Check: http://localhost:5505/api/health"
        
    - name: Deployment Failed
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs above for details."
        echo "You can run a rollback using: ./rollback-deployment.sh quick"
        exit 1
